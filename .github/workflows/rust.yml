name: Rust

on:
  push:
    branches: [ stable ]
  pull_request:
    branches: [ stable ]


env:
  CARGO_TERM_COLOR: always
  REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:

    runs-on: ubuntu-latest
    env:
      RUST_BACKTRACE: '1'
    steps:
    - uses: actions/checkout@v2
    - uses: Swatinem/rust-cache@v1
    - name: Build
      run: cargo build --verbose --release
    - uses: actions/upload-artifact@v2
      with:
        name: tunneller-binary
        path: target/release/tunneller
  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: [build]
  #   steps:
  #   - uses: actions/checkout@v2
  #   - uses: actions/download-artifact@v2
  #     with:
  #       name: tunneller-binary
  #   - name: Make tunneller executable
  #     run: chmod +x tunneller
  #   - name: Setup Docker buildx
  #     uses: docker/setup-buildx-action@79abd3f86f79a9d68a23c75a09a9a85889262adf
  #   - name: Log into registry ${{ env.REGISTRY }}
  #     if: github.event_name != 'pull_request'
  #     uses: docker/login-action@17f28ab24d0d2832d5ff23a1409bbfc373ebcb96
  #     with:
  #       registry: ${{ env.REGISTRY }}
  #       username: ${{ secrets.DOCKER_USER }}
  #       password: ${{ secrets.DOCKER_PASSWORD }}
  #   - name: Extract Docker metadata
  #     id: meta
  #     uses: docker/metadata-action@2cad85de2462ab92a22ff973a347fb25c91d6082
  #     with:
  #       images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
  #   - name: Build and push Docker image
  #     id: build-and-push
  #     uses: docker/build-push-action@fe02965b4878556fce19e4f0aa608d7d09ed629b
  #     with:
  #       context: .
  #       push: ${{ github.event_name != 'pull_request' }}
  #       tags: ${{ steps.meta.outputs.tags }}
  #       labels: ${{ steps.meta.outputs.labels }}
